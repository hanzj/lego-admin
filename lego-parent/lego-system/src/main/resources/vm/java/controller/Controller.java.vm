package ${PackageName}.controller;

import java.util.List;

import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.lego.core.dto.LegoPage;
import com.lego.core.dto.TypeInfo;
import com.lego.core.module.flowable.FlowableCheckStatus;
import com.lego.core.util.ExcelUtil;
import com.lego.core.vo.GenericSearchVO;
import com.lego.core.vo.JsonResponse;
import com.lego.core.web.BaseController;
import ${PackageName}.dto.${ClassName}Info;
import ${PackageName}.service.I${ClassName}Service;
import ${PackageName}.vo.${ClassName}CreateVO;
import ${PackageName}.vo.${ClassName}ModifyVO;

import cn.dev33.satoken.annotation.SaCheckPermission;

@RestController
@RequestMapping("/back-end/${AppCode}-${UrlName}")
public class ${ClassName}Controller extends BaseController {

    @Autowired
    private I${ClassName}Service ${FieldName}Service;

    @PostMapping("/add")
    @SaCheckPermission("${PermissionCode}_add")
    public JsonResponse<Object> add(@RequestBody ${ClassName}CreateVO vo) {
        ${FieldName}Service.add(getLoginCode(), vo);
        return JsonResponse.success();
    }

    @PostMapping("/update")
    @SaCheckPermission("${PermissionCode}_update")
    public JsonResponse<Object> update(@RequestBody ${ClassName}ModifyVO vo) {
        ${FieldName}Service.update(getLoginCode(), vo);
        return JsonResponse.success();
    }

    @PostMapping("/delete")
    @SaCheckPermission("${PermissionCode}_delete")
    public JsonResponse<Object> delete(@RequestBody List<String> codes) {
        ${FieldName}Service.delete(getLoginCode(), codes);
        return JsonResponse.success();
    }

    @PostMapping("/list")
    @SaCheckPermission("${PermissionCode}_read")
    public JsonResponse<LegoPage<${ClassName}Info>> list(@RequestBody GenericSearchVO vo) {
        return JsonResponse.success(${FieldName}Service.findPageBy(vo));
    }

    @GetMapping("/get/{code}")
    @SaCheckPermission("${PermissionCode}_detail")
    public JsonResponse<${ClassName}Info> getByCode(@PathVariable String code) {
        return JsonResponse.success(${FieldName}Service.findBy(code));
    }

    @GetMapping("/get-simple/{code}")
    @SaCheckPermission("crm_contract_detail")
    public JsonResponse<TypeInfo> getSimpleByCode(@PathVariable String code) {
        return JsonResponse.success(${FieldName}Service.findSimpleBy(code));
    }

    @PostMapping("/export")
    @SaCheckPermission("${PermissionCode}_export")
    public void exportAll(@RequestBody List<String> codes, HttpServletResponse response) {
        List<${ClassName}Info> datas = ${FieldName}Service.findBy(codes);
        ExcelUtil.exportExcel(datas, "${FunctionName}数据", ${ClassName}Info.class, response);
    }

    @PostMapping("/export-all")
    @SaCheckPermission("${PermissionCode}_export")
    public void exportAll(@RequestBody GenericSearchVO vo, HttpServletResponse response) {
        List<${ClassName}Info> datas = ${FieldName}Service.findBy(vo);
        ExcelUtil.exportExcel(datas, "${FunctionName}数据", ${ClassName}Info.class, response);
    }
}