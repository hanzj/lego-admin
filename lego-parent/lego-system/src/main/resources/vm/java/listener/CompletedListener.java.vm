package ${PackageName}.listener;

import cn.hutool.core.bean.BeanUtil;
import com.lego.core.common.Constants;
import com.lego.core.module.flowable.FlowableCheckStatus;
import com.lego.core.module.flowable.FlowableProcessConstants;
import com.lego.core.module.flowable.IFlowableCompletedListener;
import com.lego.core.util.StringUtil;
import ${PackageName}.service.I${ClassName}Service;
import ${PackageName}.vo.${ClassName}CreateVO;
import ${PackageName}.vo.${ClassName}ModifyVO;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import java.util.Map;

@Component
public class ${ClassName}CompletedListener implements IFlowableCompletedListener {

    @Autowired
    private I${ClassName}Service ${FieldName}Service;

    @Override
    public String taskCompleted(Map<String, Object> variables) {
        String code = StringUtil.toString(variables.get(FlowableProcessConstants.FORM_UNIQUE_KEY));
        if (StringUtil.isNotBlank(code) && ${FieldName}Service.exists(code)) {
            ${ClassName}ModifyVO vo = BeanUtil.toBean(variables, ${ClassName}ModifyVO.class);
            ${FieldName}Service.update(Constants.loginCode.get(), vo);
            return code;
        }
        ${ClassName}CreateVO vo = BeanUtil.toBean(variables, ${ClassName}CreateVO.class);
        return ${FieldName}Service.add(Constants.loginCode.get(), vo);
    }

    @Override
    public void taskRejected(String code) {
        ${FieldName}Service.updateCheckStatus(code, FlowableCheckStatus.rejected);
    }

    @Override
    public void processCompleted(String code) {
        ${FieldName}Service.updateCheckStatus(code, FlowableCheckStatus.completed);
    }

    @Override
    public String getTableCode() {
        return "${TableName}";
    }
}